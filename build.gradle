
import net.masterthought.cucumber.Configuration
import net.masterthought.cucumber.ReportBuilder

apply plugin: 'java'

group 'gestioncalidad'
version '1.0.1'

sourceCompatibility = 1.8

repositories {
    mavenCentral()
}


buildscript{
    repositories{
        jcenter()
        maven{ url "http://repo.bodar.com"}
    }



    dependencies{
        classpath 'net.masterthought:cucumber-reporting:3.17.1'
    }
}

    dependencies {
        ///testCompile group: 'junit', name: 'junit', version: '4.12'

        // testng
        testCompile group: 'org.testng', name: 'testng', version: '6.14.3'


        // https://mvnrepository.com/artifact/org.seleniumhq.selenium/selenium-java
        compile group: 'org.seleniumhq.selenium', name: 'selenium-java', version: '3.141.59'

        // https://mvnrepository.com/artifact/info.cukes/cucumber-java
        compile group: 'info.cukes', name: 'cucumber-java', version: '1.2.5'

        // https://mvnrepository.com/artifact/org.testng/testng
        testCompile group: 'org.testng', name: 'testng', version: '6.14.3'

        // cucumber-java
        compile group: 'info.cukes', name: 'cucumber-java', version: '1.2.5'



        // cucumber-testng
        testCompile group: 'info.cukes', name: 'cucumber-testng', version: '1.2.5'
        testCompile group: 'info.cukes', name: 'cucumber-picocontainer', version: '1.2.5'


    }



task tarea1{
    println 'tarea 1'
}

task tarea2(dependsOn: tarea1) {
    doLast {
        println 'tarea 2'

    }

    task tarea3(dependsOn: tarea2) {
        println 'tarea 3'
    }

}


import net.masterthought.cucumber.Configuration




import net.masterthought.cucumber.ReportBuilder







group '-------'


version '1.0.0'







apply plugin: 'java'







sourceCompatibility = 1.8







repositories {


    mavenCentral()


}







buildscript{


    repositories{


        jcenter()


        maven{ url "http://repo.bodar.com"}


    }







    dependencies{


        classpath 'net.masterthought:cucumber-reporting:3.17.1'


    }


}







dependencies {


    // testng


    testCompile group: 'org.testng', name: 'testng', version: '6.14.3'







    // selenium-java


    compile group: 'org.seleniumhq.selenium', name: 'selenium-java', version: '3.12.0'







    // cucumber-java


    compile group: 'info.cukes', name: 'cucumber-java', version: '1.2.5'







    // cucumber-testng


    testCompile group: 'info.cukes', name: 'cucumber-testng', version: '1.2.5'


    testCompile group: 'info.cukes', name: 'cucumber-picocontainer', version: '1.2.5'







    //rest-assured


    compile 'io.rest-assured:json-path:3.0.3'


    compile 'io.rest-assured:rest-assured:3.0.3'


    compile group: 'io.rest-assured', name: 'json-schema-validator', version: '3.0.5'


}







task runFeatures(type: Test) {


    // enable TestNG support (default is JUnit)


    useTestNG()







    options {


        jvmArgs = ['-Dcucumber.options= ' +


                           '--glue uitesting.upb.org ' +


                           '--plugin pretty ' +


                           '--plugin json:build/cucumber/cucumber.json ' +


                           '--plugin rerun:build/cucumber/rerun.txt ']


        jvmArgs = ['-Dbrowser=' + Browser]


    }







    // show standard out and standard error of the test JVM(s) on the console


    testLogging.showStandardStreams = true







    // set JVM arguments for the test JVM(s)


    scanForTestClasses = false







    // Do not use the Gradle's HTML report:


    reports.html.enabled = false







    ignoreFailures = true







    doLast {


        generateReport('build/cucumber/cucumber.json', 'build/cucumber/reports')


    }


}







def generateReport(String pathCucumber, String pathReport){


    File reportOutputDirectory = new File(pathReport)


    List<String> jsonFiles = new ArrayList<>()


    jsonFiles.add(pathCucumber)







    String buildNumber = "1"


    String projectName = "UPB Report"


    boolean runWithJenkins = false


    boolean parallelTesting = false







    Configuration configuration = new Configuration(reportOutputDirectory, projectName)


// optional configuration


    configuration.setParallelTesting(parallelTesting)


    configuration.setRunWithJenkins(runWithJenkins)


    configuration.setBuildNumber(buildNumber)


// addidtional metadata presented on main page


    configuration.addClassifications("Platform", "Windows")


    configuration.addClassifications("Browser", "Firefox")


    configuration.addClassifications("Branch", "release/1.0")







    ReportBuilder reportBuilder = new ReportBuilder(jsonFiles, configuration)


    reportBuilder.generateReports()


}




